# This is the base for our build step container
# which has all our build essentials
FROM balenalib/%%BALENA_MACHINE_NAME%%-debian:buster AS buildstep
RUN apt-get update && apt-get install -y build-essential gcc
COPY hello.c /app/hello.c
COPY rpi-rgb-led-matrix /app/rpi-rgb-led-matrix 
WORKDIR /app

RUN gcc -o hello hello.c && chmod +x hello
RUN make -C rpi-rgb-led-matrix/examples-api-use/
#RUN chmod +x rpi-rgb-led-matrix/examples-api-use/demo

# This is our runtime container that will end up
# running on the device.
FROM balenalib/%%BALENA_MACHINE_NAME%%-debian:buster

# Uncomment the following if your binary requires additional dependencies
# RUN apt-get update && apt-get install -y libgraphicsmagick++-dev libwebp-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev
# curl \
# && rm -rf /var/lib/apt/lists/*

# Defines our working directory in container
RUN mkdir -p /usr/src/app/
WORKDIR /usr/src/app

# Copy our artifact into our deployable container context.
COPY --from=buildstep /app/hello ./hello
COPY --from=buildstep /app/rpi-rgb-led-matrix rpi-rgb-led-matrix

# Copy our start script into our deployable container context.
COPY ./start.sh ./start.sh

# Enable systemd init system in container
ENV INITSYSTEM=on

# server.js will run when container starts up on the device
CMD ["bash", "/usr/src/app/start.sh"]
