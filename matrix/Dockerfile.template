# This is the base for our build step container
# which has all our build essentials
FROM balenalib/%%BALENA_MACHINE_NAME%%-debian:buster AS build

# Install build tools and remove apt-cache afterwards
RUN apt-get -q update && apt-get install -yq --no-install-recommends \
	build-essential \
	&& apt-get clean && rm -rf /var/lib/apt/lists/*


# Uncomment the following if your binary requires additional dependencies
# RUN apt-get update && apt-get install -y libgraphicsmagick++-dev libwebp-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev mono-complete \
# curl \
# && rm -rf /var/lib/apt/lists/*

# RUN apt-get update && apt-get install -y sudo \
# curl \
# && rm -rf /var/lib/apt/lists/*

# Copy all the app source into docker context
WORKDIR /usr/src/app

COPY . /usr/src/app

# Switch into our apps working directory
# WORKDIR /usr/src/app/rpi-rgb-led-matrix/utils
# RUN make video-viewer

# RUN gcc -o hello hello.c && chmod +x hello
RUN make -C src/draft_codes/
# This is our runtime container that will end up
# running on the device.

# WORKDIR /usr/src/app/rpi-rgb-led-matrix/bindings/c#/
# RUN make build-csharp
FROM balenalib/%%BALENA_MACHINE_NAME%%-debian:buster

# Copy our artifact into our deployable container context.
#COPY --from=build /usr/src/app/hello hello
COPY --from=build /usr/src/app/src src
# Enable systemd init system in container
# ENV INITSYSTEM on

CMD src/draft_codes/noise --led-rows=32 --led-cols=64 --led-multiplexing=2 --led-slowdown-gpio=2 --led-gpio-mapping=adafruit-hat-pwm --led-limit-refresh=240
# CMD ./rpi-rgb-led-matrix/examples-api-use/utils/video-viewer --led-rows=32 --led-cols=64 --led-multiplexing=2 --led-slowdown-gpio=2 --led-gpio-mapping=adafruit-hat-pwm ./rpi-rgb-led-matrix/utils/earth_vid.mp4